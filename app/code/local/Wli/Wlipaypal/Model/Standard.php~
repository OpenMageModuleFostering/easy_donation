<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    Mage
 * @package     Mage_Paypal
 * @copyright   Copyright (c) 2014 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Model to calculate grand total or an order
 *
 * @category    Wli
 * @package     Wlipaypal
 * @author      Weblineindia Team
 */


require_once 'Mage/Paypal/Model/Standard.php';
class Wli_Wlipaypal_Model_Standard extends Mage_Payment_Model_Method_Abstract
{
 	/**
     * Return form field array
     *
     * @return array
     */
    public function getStandardCheckoutFormFields()
    {
      
	print_r($_POST); exit;
  $orderIncrementId = $this->getCheckout()->getLastRealOrderId();
        $order = Mage::getModel('sales/order')->loadByIncrementId($orderIncrementId);
        /* @var $api Mage_Paypal_Model_Api_Standard */
        $api = Mage::getModel('paypal/api_standard')->setConfigObject($this->getConfig());
        $api->setOrderId($orderIncrementId)
            ->setCurrencyCode($order->getBaseCurrencyCode())
            //->setPaymentAction()
            ->setOrder($order)
            ->setNotifyUrl(Mage::getUrl('paypal/ipn/'))
            ->setReturnUrl(Mage::getUrl('paypal/standard/success'))
            ->setCancelUrl(Mage::getUrl('paypal/standard/cancel'));

        // export address
        $isOrderVirtual = $order->getIsVirtual();
        $address = $isOrderVirtual ? $order->getBillingAddress() : $order->getShippingAddress();
        if ($isOrderVirtual) {
            $api->setNoShipping(true);
        } elseif ($address->validate()) {
            $api->setAddress($address);
        }

        // add cart totals and line items
        $api->setPaypalCart(Mage::getModel('paypal/cart', array($order)))
            ->setIsLineItemsEnabled($this->_config->lineItemsEnabled)
        ;
        
        echo $order->getGrandTotal(); exit;
        $api->setCartSummary($this->_getAggregatedCartSummary());
        
        //$result['amount'] = round($order->getGrandTotal(), 2);
        $api->setLocale($api->getLocaleCode());
        $result = $api->getStandardCheckoutRequest();

	// Custom logic for the donation amount to be added in grand total        
	$result['amount'] = round($order->getGrandTotal(), 2);
        $j = 0;
        $items = $order->getAllItems();
        foreach ($items as $itemId => $item)
        {
        	$j ++;
        	$result['amount_'.$j] = round($item->getPrice(), 2);
        }
        // end

        return $result;
    }
}
